generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstname  String    @db.VarChar
  lastname   String    @db.VarChar
  email      String    @unique @db.VarChar
  password   String    @db.VarChar
  birthdate  DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  sessions   Session[]

  @@map("user")
}

model Session {
  id                Int               @id @default(autoincrement())
  title             String            @db.VarChar
  session_date      DateTime
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  user_id           Int
  user              User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  session_exercises SessionExercise[]

  @@map("session")
}

model SessionExercise {
  id                     Int      @id @default(autoincrement())
  load                   Decimal
  rest_between_exercises Int
  validated              Boolean  @default(false)
  comment                String?
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  session_id             Int
  exercise_id            Int
  exercise               Exercise @relation(fields: [exercise_id], references: [id], onDelete: Cascade)
  session                Session  @relation(fields: [session_id], references: [id], onDelete: Cascade)
  sets                   Set[]

  @@map("sessionExercise")
}

model Set {
  id                    Int             @id @default(autoincrement())
  number_of_repetitions Int
  difficulty            Int             @default(1) @db.Integer
  rest_between_sets     Int
  session_exercise_id   Int
  session_exercise      SessionExercise @relation(fields: [session_exercise_id], references: [id], onDelete: Cascade)

  @@map("set")
}

model Exercise {
  id                      Int                   @id @default(autoincrement())
  name                    String                @db.VarChar
  description             String?               @db.VarChar
  exercises_muscle_groups ExerciseMuscleGroup[]
  session_exercises       SessionExercise[]

  @@map("exercise")
}

model ExerciseMuscleGroup {
  id              Int         @id @default(autoincrement())
  exercise_id     Int
  muscle_group_id Int
  exercise        Exercise    @relation(fields: [exercise_id], references: [id])
  muscle_group    MuscleGroup @relation(fields: [muscle_group_id], references: [id])

  @@map("exerciseMuscleGroup")
}

model MuscleGroup {
  id                      Int                   @id @default(autoincrement())
  name                    String                @db.VarChar
  exercises_muscle_groups ExerciseMuscleGroup[]

  @@map("muscleGroup")
}
